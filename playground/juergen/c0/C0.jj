PARSER_BEGIN(C0)

public class C0 {
	public static void main(String args[]) {
    C0 parser;
    if (args.length == 1) {
      try {
        System.out.println("C0 Parser -- reading from file\n");
        parser = new C0(new java.io.FileInputStream(new java.io.File(args[0])));
        parser.Init();
      } catch (Exception ex) {
        System.out.println(ex.getMessage());
      }
    }
    else if (args.length == 0) {
      System.out.println("C0 Parser -- standard input\n");
      parser = new C0(System.in);
    }
    else {
      System.out.println("Usage: java C0 <inputfile>\n");
    }
	}
}

PARSER_END(C0)

SKIP : 
{ 
	" " | "\t" | "\n" | "\r" 
}

// Keywords
TOKEN :
{
      < INT:        "int" >
    | < BOOLEAN:    "bool" >
    | < STRING:     "string" >
    | < CHAR:       "char" >
    | < VOID:       "void" >
    | < STRUCT:     "struct" >
    | < TYPEDEF:    "typedef" >
    | < IF:         "if" >
    | < ELSE:       "else" >
    | < WHILE:      "while" >
    | < FOR:        "for" >
    | < CONTINUE:   "continue" >
    | < BREAK:      "break" >
    | < RETURN:     "return" >
    | < ASSERT:     "assert" >
    | < TRUE:       "true" >
    | < FALSE:      "false" >
    | < NULL:       "NULL" >
    | < ALLOC:      "alloc" >
    | < ALLOC_ARR:  "alloc_array" >
}

// Lexical Tokens
TOKEN :
{
        < ID: <LETTER> ( <ALPHANUM> )* >
    |   < #LETTER: ["$","A"-"Z","a"-"z","_"] >
    |   < #ALPHANUM: ["$","A"-"Z","a"-"z","0"-"9","_"] >
    |   < NUM: <DECNUM> | <HEXNUM> >
    |   < DECNUM: "0" | ["1"-"9"](["1"-"9"])* >
    |   < HEXNUM: "0" ("x" | "X") (["0"-"9","a"-"f","A"-"F"])+ >
//    |   < SEP: "(" | ")" | "[" | "]" | "{" | "}" | "," | ";" >
//    |   < UNOP: "!" | "~" | "-" | "*" >
    |   < BINOP: "." | "->" | "*" | "/" | "%" | "+" | "-" | "<<" | ">>" | "<" | "<=" | ">=" | ">" | "==" | "!=" | "&" | "^" | "|" | "&&" | "||" | "?" | ":" >
    |   < EQOP: "<" | "<=" | ">=" | ">" | "==" | "!=" | "&&" | "||" >
    |   < CONCATOP: "&&" | "||" >
    |   < ASNOP: "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "^=" | "|=" >
    |   < POSTOP: "--" | "++" >
}

void Init() : 
{}
{
    //Method()
    Conditional()
    <EOF>
}

void Method() : 
{}
{
    Methodtype() <ID> "(" Params() ")" "{" MethodBody() "}"
}

void Params() :
{}
{
    [ParamsType() <ID> ("," ParamsType() <ID>)*]
}

void Methodtype() : 
{}
{
    <VOID> | <INT> | <CHAR> | <STRING> | <BOOLEAN>
}
void ParamsType() :
{}
{
    (<INT> | <CHAR> | <STRING> | <BOOLEAN>) ("[" "]")*
}
void MethodBody() :
{}
{
    (<ID>)*
}

void Conditional() :
{}
{
    <IF> "(" EvaluationExpression() ")"  "{" MethodBody() "}" [ <ELSE>  "{" MethodBody() "}"]
}

void EvaluationExpression() :
{}
{
      Operand() [ <EQOP> Operand() [ <CONCATOP> ( Operand() <EQOP> Operand() )* ] ]
}

void Operand() :
{}
{
      ["!"]<ID>
}
