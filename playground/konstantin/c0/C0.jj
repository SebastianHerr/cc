PARSER_BEGIN (C0)
public class C0 {
	public static void main (String args[]) throws ParseException {
		try {
			C0 parser;
			if (args.length > 0) {
				parser = new C0 (new java.io.FileInputStream(new java.io.File(args[0])));
			} else {
				parser = new C0 (System.in);
			}
			parser.S();
			System.out.println ("[  OK  ]");
		} catch (Exception ex) {
			System.out.println ("[ FAIL ]\n\n" + ex.getMessage());
		}
	}
}
PARSER_END (C0)

SKIP : { 
	" " | "\t" | "\r" | "\n" | "\r\n"
}

SPECIAL_TOKEN: {
	< INCLUDE: "#" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")? >
	|
	< SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")? >
	|
	< MULTI_LINE_COMMENT: "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >
}

// Keywords
TOKEN : {
		< INT:        "int" >
	| < BOOLEAN:    "bool" >
	| < STRING:     "string" >
	| < CHAR:       "char" >
	| < VOID:       "void" >
	| < STRUCT:     "struct" >
	| < TYPEDEF:    "typedef" >
	| < IF:         "if" >
	| < ELSE:       "else" >
	| < WHILE:      "while" >
	| < FOR:        "for" >
	| < CONTINUE:   "continue" >
	| < BREAK:      "break" >
	| < RETURN:     "return" >
	| < ASSERT:     "assert" >
	| < TRUE:       "true" >
	| < FALSE:      "false" >
	| < NULL:       "NULL" >
	| < ALLOC:      "alloc" >
	| < ALLOC_ARR:  "alloc_array" >
}

// Separators
TOKEN : {
		< LPAREN: "(" >
	| < RPAREN: ")" >
	| < LBRACE: "{" >
	| < RBRACE: "}" >
	| < LBRACKET: "[" >
	| < RBRACKET: "]" >
	| < SEMICOLON: ";" >
	| < COMMA: "," >
	| < DOT: "." >
}

// Lexical Tokens
TOKEN : {
		< ID: <LETTER> ( <ALPHANUM> )* >
	|	< #LETTER: ["$","A"-"Z","a"-"z","_"] >
	|	< #ALPHANUM: ["$","A"-"Z","a"-"z","0"-"9","_"] >
	|	< NUM: <DECNUM> | <HEXNUM> >
	|	< DECNUM: "0" | ["1"-"9"] (["1"-"9"])* >
	|	< HEXNUM: "0" ("x" | "X") (["0"-"9","a"-"f","A"-"F"])+ >
}

void S() : {}
{
	// #include wird soll geskipt werden -> preprocessor
	( ProgramMember() )*
	<EOF>
}

void ProgramMember(): {}
{
	Method() // | Attribute() | Definition()
}

void Method() : {}
{
	MethodType() <ID> <LPAREN> Params() <RPAREN> <LBRACE> ( Expression() )+ <RBRACE>
}

void Params() : {}
{
	Type() <ID> [<COMMA> Params()]
}

void Type() : {}
{
	( <INT> | <BOOLEAN> | <CHAR> | <STRING> ) [<LBRACKET> <RBRACKET>]
}

void MethodType() : {}
{
	( <VOID> | Type() )
}

void Expression() : {}
{
	<ID>
}