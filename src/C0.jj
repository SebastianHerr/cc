PARSER_BEGIN(C0)
public class C0 {
	public static void main(String args[]) {
		C0 parser;
		try {
			if (args.length > 0) {
				parser = new C0 (new java.io.FileInputStream(new java.io.File(args[0])));
			} else {
				parser = new C0 (System.in);
			}
			parser.Program();
			System.out.println ("[  OK  ]");
		} catch (Exception ex) {
			System.out.println ("[ FAIL ]\n\n" + ex.getMessage());
		}
	}
}
PARSER_END(C0)

SKIP : { " " | "\t" | "\n" | "\r" | "\r\n" | "/*" : IN_COMMENT }
<IN_COMMENT> MORE : {	<~[]> | "*/" : DEFAULT }

// Keywords
TOKEN : {
		< INT:        "int" >
	| < BOOLEAN:    "bool" >
	| < STRING:     "string" >
	| < CHAR:       "char" >
	| < VOID:       "void" >
	| < STRUCT:     "struct" >
	| < IF:         "if" >
	| < ELSE:       "else" >
	| < WHILE:      "while" >
	| < FOR:        "for" >
	| < CONTINUE:   "continue" >
	| < BREAK:      "break" >
	| < RETURN:     "return" >
	| < ASSERT:     "assert" >
	| < TRUE:       "true" >
	| < FALSE:      "false" >
	| < NULL:       "NULL" >
	| < ALLOC:      "alloc" >
  | < ALLOC_ARR:  "alloc_array" >
  | < USE:  			"#use" >
  | < ERROR:			"error" >
}

// Separators
TOKEN : {
		< LPAREN: "(" >
	| < RPAREN: ")" >
	| < LBRACE: "{" >
	| < RBRACE: "}" >
	| < LBRACKET: "[" >
  | < RBRACKET: "]" >
  | < LWICKET: "<" >
  | < RWICKET: ">" >
  | < QUOTE: "\"" >
  | < COLON: ":" >
  | < SEMICOLON: ";" >
	| < COMMA: "," >
}

// Operators
TOKEN : {
	< STAR: "*" >
  | < EQUALS: "=">
  | < POINTERACCESS: "->">
  | < QUESTION: "?">
	| < DOT: "." >
}

// Lexical Tokens
TOKEN : {
	< ID: <LETTER> ( <ALPHANUM> )* >
	|	< #LETTER: ["$","A"-"Z","a"-"z","_"] >
	|	< #ALPHANUM: ["$","A"-"Z","a"-"z","0"-"9","_"] >
	|	< NUM: <DECNUM> | <HEXNUM> >
	|	< DECNUM: "0" | ["1"-"9"] (["1"-"9"])* >
	|	< HEXNUM: "0" ("x" | "X") (["0"-"9","a"-"f","A"-"F"])+ >
	|	< UNOP: "!" | "~" | "-" | "*" >
	|	< BINOP:  "*" | "/" | "%" | "+" | "-" | "<<" | ">>" | "<" | "<=" | ">=" | ">" | "==" | "!=" | "&" | "^" | "|" | "&&" | "||" >
	|	< ASNOP: "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "^=" | "|=" >
	|	< POSTOP: "--" | "++" >
}

void Program () : {}
{
	Statement ()
	// ( Import () )*
	// ( LOOKAHEAD(Declaration()) Declaration () )*
	// ( LOOKAHEAD(Definition()) Definition () )*
	// Definition ()
}

/**
 * [ ] <EOL> missing, because in Skip-Token...
 */
void Import () : {}
{
	LOOKAHEAD(2) <USE> <LWICKET> <ID> <RWICKET>
	| 
	<USE> <QUOTE> <ID> <QUOTE>
}

// done
void Declaration () : {}
{
	LOOKAHEAD(3) <STRUCT> <ID> <SEMICOLON>
	|	
	LOOKAHEAD(3) Type () <ID> <LPAREN> [ Type () <ID> ( <COMMA> Type () <ID> )* ] <RPAREN> <SEMICOLON>
}

// done
void Definition () : {}
{
	LOOKAHEAD(3) <STRUCT> <ID> <LBRACE> ( Type () <ID> <SEMICOLON> )* <RBRACE> <SEMICOLON>
	|	
	LOOKAHEAD(3) Type () <ID> <LPAREN> [ Type () <ID> ( <COMMA> Type () <ID> )* ] <RPAREN> <LBRACE> ( Statement () )* <RBRACE>
}

// [ ] reduce LOOKAHEAD for Simple()
void Statement () : {}
{
	LOOKAHEAD(Simple () <SEMICOLON>) Simple () <SEMICOLON>
	|
	<IF> <LPAREN> Expression () <RPAREN> Statement () [ LOOKAHEAD(2) <ELSE> Statement () ]
	|	
	<WHILE> <LPAREN> Expression () <RPAREN> Statement ()
	|	
	<FOR> <LPAREN> [ Simple () ] <SEMICOLON> Expression () <SEMICOLON> [ Simple () ] <RPAREN> Statement ()
	|	
	<RETURN> [ Expression () ] <SEMICOLON>
	|	
	<ASSERT> <LPAREN> Expression () <RPAREN> <SEMICOLON>
	|	
	<ERROR> <LPAREN> Expression () <RPAREN> <SEMICOLON>
	| 
	<LBRACE> ( Statement () )* <RBRACE>
}

void Simple () : {}
{
	LOOKAHEAD(Expression()) Expression ()
  |	
	LOOKAHEAD(3) MemberAccess () <ASNOP> Expression ()
	|	
	LOOKAHEAD(3) MemberAccess () <POSTOP>
	|	
	Type () <ID> [ <EQUALS> Expression () ]
}

// done
void MemberAccess () : {}
{
	(
		<ID>
		|	
		<STAR> <ID>
		|	
		<LPAREN> MemberAccess () <RPAREN>
	)
	(
		<DOT> <ID>
		|	
		<POINTERACCESS> <ID>
	)*
}

// done
void Type () : {}
{
	(	
		<INT> 
		| 
		<BOOLEAN> 
		| 
		<STRING> 
		| 
		<CHAR> 
		| 
		<VOID> 
		| 
		<STRUCT> <ID>
		// | <ID> // used for typedef C0--
	)
	(
		<STAR>
		| 
		<LBRACKET> <RBRACKET>
	)*
}

void Expression () : {}
{	
	(
			<LPAREN> Expression () <RPAREN>
		|	<LBRACE> Expression () <RBRACE>
		| <UNOP> Expression ()
		|	<NUM>
		|	<TRUE>
		|	<FALSE>
		|	<NULL>
		|	LOOKAHEAD(2) <ID>
		| <ID> <LPAREN> [ Expression () ( <COMMA> Expression () )* ] <RPAREN>
		| <ALLOC> <LPAREN> Type () <RPAREN>
		| <ALLOC_ARR> <LPAREN> Type () <COMMA> Expression () <RPAREN>
	)
	(
		LOOKAHEAD(2) LeftRecursionExpression () 
	)*
}

void LeftRecursionExpression () : {}
{
	(
			<LPAREN> Expression () <RPAREN>
		|	<LBRACE> Expression () <RBRACE>
		| <UNOP> Expression ()
		|	<NUM>
		|	<TRUE>
		|	<FALSE>
		|	<NULL>
		|	LOOKAHEAD(2) <ID>
		| <ID> <LPAREN> [ Expression () ( <COMMA> Expression () )* ] <RPAREN>
		| <ALLOC> <LPAREN> Type () <RPAREN>
		| <ALLOC_ARR> <LPAREN> Type () <COMMA> Expression () <RPAREN>
	)
	|
	(
			<QUESTION> Expression () <COLON> Expression ()
		| <BINOP> Expression ()
		| <POSTOP>
		| <DOT> <ID>
		| <POINTERACCESS> <ID>
		| <LBRACKET> Expression () <RBRACKET>
	)
}