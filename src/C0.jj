/**
 * C0-- Parser
 * HS-Fulda - Compiler Constructions
 *
 * @author    Konstantin Ruppel
 * @autor     Juergen Goebel
 * @autor     Sebastian Herr
 * 
 * @date      2017/06/03
 */

PARSER_BEGIN(C0)
public class C0 {
	static boolean x = true;
	public static void main(String args[]) {
		C0 parser;
		try {
			if (args.length > 0) {
				parser = new C0 (new java.io.FileInputStream(new java.io.File(args[0])));
			} else {
				parser = new C0 (System.in);
			}
			parser.Program();
			System.out.println ("[  OK  ]");
		} catch (Exception ex) {
			System.out.println ("[ FAIL ]" + ((args.length > 1) ? ex.getMessage() + "\n\n" : ""));
		}
	}
}
PARSER_END(C0)

SKIP : 
{ 
  " " | "\t" | "\f" | "\n" | "\r" | "\r\n"
  |
  "/*" : IN_ML_COMMENT
  |
  < "//" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
}

<IN_ML_COMMENT> SKIP :
{
  <~[]>
  |
  "*/" : DEFAULT
}

// Keywords
TOKEN : {
	< INT:        	"int" >
	| < BOOLEAN:    "bool" >
	| < CHAR:       "char" >
	| < VOID:       "void" >
	| < STRUCT:     "struct" >
	| < IF:         "if" >
	| < ELSE:       "else" >
	| < WHILE:      "while" >
	| < FOR:        "for" >
	| < RETURN:     "return" >
	| < TRUE:       "true" >
	| < FALSE:      "false" >
	| < NULL:       "NULL" >
	| < ALLOC:      "alloc" >
  | < ALLOC_ARR:  "alloc_array" >
}

TOKEN : {
	< ID: <LETTER> ( <ALPHANUM> )* >
	|	< #LETTER: ["$","A"-"Z","a"-"z","_"] >
	|	< #ALPHANUM: ["$","A"-"Z","a"-"z","0"-"9","_"] >
	|	< NUM: <DECNUM> | <HEXNUM> >
	|	< DECNUM: "0" | ["1"-"9"](["0"-"9"])* >
	|	< HEXNUM: "0" ("x" | "X") (["0"-"9","a"-"f","A"-"F"])+ >
}

void Program () : { Node me = new Node("Program"); Node decl; }
{
	( 
    decl = Declaration_Definition() {me.addChild(decl);}
  )* 
  <EOF> {me.addChild("<EOF>");}
  
  {
    me.printTree("");
  }
}

Node Sid () : { Node me = new Node("Sid"); Token t; }
{
  t=<ID> {me.addChild(t.image);}
  {
    return me;
  }
}

Node Vid () : { Node me = new Node("Vid"); Token t; }
{
  t=<ID> {me.addChild(t.image);}
  {
    return me;
  }
}

Node Fid () : { Node me = new Node("Fid"); Token t; }
{
  t=<ID> {me.addChild(t.image);}
  {
    return me;
  }
}

Node Declaration_Definition () : { Node me = new Node("Declaration_Definition"); Node sid, type, vid, stat; }
{
  (
    LOOKAHEAD (3)
    <STRUCT> {me.addChild("struct");}
    sid = Sid() {me.addChild(sid);}
    [ 
      "{" {me.addChild("{");}
      ( 
        type = Type() {me.addChild(type);}
        vid = Vid() {me.addChild(vid);}
        ";" {me.addChild(";");}
      )* 
      "}" {me.addChild("}");}
    ] 
    ";" {me.addChild(";");}
    |
    type = Type() {me.addChild(type);}
    vid = Vid() {me.addChild(vid);}
    "(" {me.addChild("(");}
    [ 
      type = Type() {me.addChild(type);}
      vid = Vid() {me.addChild(vid);}
      ( 
        "," {me.addChild(";");}
        type = Type() {me.addChild(type);}
        vid = Vid() {me.addChild(vid);}
      )*
    ] 
    ")" {me.addChild(")");}
    ( 
      "{" {me.addChild("{");}
      ( 
        stat = Statement() {me.addChild(stat);}
      )* 
      "}" {me.addChild("}");}
      |
      ";" {me.addChild(";");}
    )
  )
  {
    return me;
  }
}

Node Statement () : { Node me = new Node("Statement"); Node exp1, exp2, exp3, stat1, stat2; }
{
  (
    exp1= Expression() {me.addChild(exp1);}
    ";" {me.addChild(";");}
    |
    <IF> {me.addChild("if");}
    "(" {me.addChild("(");}
    exp1 = Expression() {me.addChild(exp1);}
    ")" {me.addChild(")");}
    stat1 = Statement() {me.addChild(stat1);}
    [ 
      LOOKAHEAD(2) 
      <ELSE> {me.addChild("else");}
      stat2 = Statement() {me.addChild(stat2);}
    ]
    |
    <WHILE> {me.addChild("while");}
    "(" {me.addChild(")");}
    exp1 = Expression() {me.addChild(exp1);}
    ")" {me.addChild(")");}
    stat1 = Statement() {me.addChild(stat1);}
    |
    <FOR> {me.addChild("for");}
    "(" {me.addChild("(");}
    [ 
      exp1 = Expression() {me.addChild(exp1);}
    ] 
    ";" {me.addChild(";");}
    exp2= Expression() {me.addChild(exp2);}
    ";" {me.addChild(";");}
    [ 
      exp3 = Expression() {me.addChild(exp3);}
    ] 
    ")" {me.addChild(")");}
    stat1 = Statement() {me.addChild(stat1);}
    |
    <RETURN> {me.addChild("return");}
    [ 
      exp1 = Expression() {me.addChild(exp1);}
    ] 
    ";" {me.addChild(";");}
    |
    "{" {me.addChild("{");}
    ( 
      stat1 = Statement() {me.addChild(stat1);}
    )* 
    "}" {me.addChild("}");}
  )
  {
    return me;
  }
}

Node MemberAccess () : { Node me = new Node("MemberAccess"); Node fid1, fid2, exp, macc; }
{
  (
    "." {me.addChild(".");}
    fid1 = Fid() {me.addChild(fid1);}
    |
    "->" {me.addChild("->");}
    fid2 = Fid() {me.addChild(fid2);}
    |
    "[" {me.addChild("[");}
    exp = Expression() {me.addChild(exp);}
    "]" {me.addChild("]");}
  )
  [
    macc = MemberAccess() {me.addChild(macc);}
  ]
  {
    return me;
  }
}

Node Type () : { Node me = new Node("Type"); Node sid; }
{
	(
		<INT> {me.addChild("int");}
    | 
    <BOOLEAN> {me.addChild("boolean");}
    | 
    <CHAR> {me.addChild("char");}
    | 
    <VOID> {me.addChild("void");}
		|
		<STRUCT> {me.addChild("struct");}
    sid = Sid() {me.addChild(sid);}
	)
	(
		"*" {me.addChild("*");}
    | 
    "[" "]" {me.addChild("["); me.addChild("]");}
	)*
  {
    return me;
  }
}

Node FunctionCallArgs () : { Node me = new Node("FunctionCallArgs"); Node exp1, exp2; }
{
  [
    exp1 = Expression() {me.addChild(exp1);}
    (
      "," {me.addChild(";");}
      exp2 = Expression() {me.addChild(exp2);}
    )*
  ]
  {
    return me;
  }
}

Node Expression () : { Node me = new Node("Expression"); Node type, exp, ass, vid, cond; }
{
  (
    <ALLOC> {me.addChild("alloc");}
    "(" {me.addChild("(");}
    type = Type() {me.addChild(type);}
    ")" {me.addChild(")");}
    |
    <ALLOC_ARR> {me.addChild("alloc_arr");} 
    "(" {me.addChild("==");}
    type = Type() {me.addChild(type);}
    "," {me.addChild(";");}
    exp = Expression() {me.addChild(exp);}
    ")" {me.addChild(")");}
    |
    ass = OpRang_Assign() {me.addChild(ass);}
    |
    type = Type() {me.addChild(type);}
    vid = Vid() {me.addChild(vid);}
    [ 
      LOOKAHEAD(2)
      "=" {me.addChild("=");}
      cond = OpRang_Conditional() {me.addChild(cond);} 
    ]
  )
  {
    return me;
  }
}

Node OpRang_Assign () : { Node me = new Node("OpRang_Assign"); Node cond1, cond2; }
{
  cond1 = OpRang_Conditional() {me.addChild(cond1);}
  [ 
    LOOKAHEAD(2)
    (
      "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "<<=" | ">>=" | "&=" | "^=" | "|=" 
    ) {me.addChild("!!!!TODO!!!!");}
    cond2 = OpRang_Conditional() {me.addChild(cond2);}
  ]
  {
    return me;
  }
}

Node OpRang_Conditional () : { Node me = new Node("OpRang_Conditional"); Node or, exp1, exp2; }
{
  or = OpRang_LogicalOr() {me.addChild(or);}
  [ 
    LOOKAHEAD(2) ( 
      "?" {me.addChild("?");}

      exp1 = Expression() {me.addChild(exp1);}
      
      ":" {me.addChild(":");}
      
      exp2 = Expression() {me.addChild(exp2);}
    )
  ]
  {
    return me;
  }
}

Node OpRang_LogicalOr () : { Node me = new Node("OpRang_LogicalOr"); Node and, or; }
{
  and = OpRang_LogicalAnd() {me.addChild(and);}
  [
    (
      "||" {me.addChild("||");}
    ) 
    or = OpRang_LogicalOr() {me.addChild(or);}
  ]
  {
    return me;
  }
}

Node OpRang_LogicalAnd () : { Node me = new Node("OpRang_LogicalAnd"); Node or, and; }
{
  or = OpRang_BitOr() {me.addChild(or);}
  [ 
    ( 
      "&&" {me.addChild("&&");}
    ) 
    and = OpRang_LogicalAnd() {me.addChild(and);}
  ]
  {
    return me;
  }
}

Node OpRang_BitOr () : { Node me = new Node("OpRang_BitOr"); Node xor, or; }
{
  xor = OpRang_BitXor() {me.addChild(xor);}
  [ 
    (
      "|" {me.addChild("|");}
    ) 
    or = OpRang_BitOr() {me.addChild(or);}
  ]
  {
    return me;
  }
}

Node OpRang_BitXor () : { Node me = new Node("OpRang_BitXor"); Node and, xor; }
{
  and = OpRang_BitAnd() {me.addChild(and);}
  [ 
    ( 
      "^" {me.addChild("^");}
    ) 
    xor = OpRang_BitXor() {me.addChild(xor);}
  ]
  {
    return me;
  }
}

Node OpRang_BitAnd () : { Node me = new Node("OpRang_BitAnd"); Node equ, and; }
{
  equ = OpRang_Equality() {me.addChild(equ);}
  [ 
    ( 
      "&" {me.addChild("&");}
    ) 
    and = OpRang_BitAnd() {me.addChild(and);}
  ]
  {
    return me;
  }
}

Node OpRang_Equality () : { Node me = new Node("OpRang_Equality"); Node comp, equ; }
{
  comp = OpRang_Compare() {me.addChild(comp);}
  [ 
    ( 
      "==" {me.addChild("==");}
      | 
      "!=" {me.addChild("!=");}
    ) 
    equ = OpRang_Equality() {me.addChild(equ);}
  ]
  {
    return me;
  }
}

Node OpRang_Compare () : { Node me = new Node("OpRang_Compare"); Node shift, comp; }
{
  shift = OpRang_BitShift() {me.addChild(shift);}
  [ 
    ( 
      "<" {me.addChild("<");}
      | 
      ">" {me.addChild(">");}
      | 
      ">=" {me.addChild(">=");}
      | 
      "<=" {me.addChild("<=");}
    ) 
    comp = OpRang_Compare() {me.addChild(comp);}
  ]
  {
    return me;
  }
}

Node OpRang_BitShift () : { Node me = new Node("OpRang_BitShift"); Node sum, shift; }
{
  sum = OpRang_Sum() {me.addChild(sum);} 
  [ 
    (
      "<<" {me.addChild("<<");} 
      |
      ">>" {me.addChild(">>");}
    ) 
    shift = OpRang_BitShift() {me.addChild(shift);} 
  ]
  {
    return me;
  }
}

Node OpRang_Sum () : { Node me = new Node("OpRang_Sum"); Node fac, sum; }
{
  fac = OpRang_Factor() {me.addChild(fac);}
  [ 
    (
      "+" {me.addChild("+");}
      | 
      "-" {me.addChild("-");}
    ) 
    sum = OpRang_Sum() {me.addChild(sum);}
  ]
  {
    return me;
  }
}

Node OpRang_Factor () : { Node me = new Node("OpRang_Factor"); Node unary, fac;}
{
  unary = OpRang_Unary() {me.addChild(unary);} 
  [ 
    (
      "*" {me.addChild("*");}
      | 
      "/" {me.addChild("/");}
      | 
      "%" {me.addChild("%");}
    ) 
    fac = OpRang_Factor() {me.addChild(fac);}
  ]
  {
    return me;
  }
}

Node OpRang_Unary () : { Node me = new Node("OpRang_Unary"); Node fnCallArgs, vid, cond, macc; Token lit; }
{
  [
    "*" {me.addChild("*");}
    | 
    "-" {me.addChild("-");}
    | 
    "~" {me.addChild("~");}
    | 
    "!" {me.addChild("!");}
  ]
  (
    vid = Vid() {me.addChild(vid);}
    [ 
      "(" {me.addChild("(");}
      fnCallArgs = FunctionCallArgs() {me.addChild(fnCallArgs);}
      ")" {me.addChild(")");}
      | 
      "--" {me.addChild("--");}
      | 
      "++" {me.addChild("++");}
    ]
    |
    lit = <NUM>{me.addChild(lit.image);}
    | 
    lit = <TRUE>{me.addChild(lit.image);} 
    | 
    lit = <FALSE>{me.addChild(lit.image);} 
    | 
    lit = <NULL>{me.addChild(lit.image);}
    |
    "(" {me.addChild("(");}
    cond = OpRang_Conditional() {me.addChild(cond);}
    ")" {me.addChild(")");}
  )
  [
    macc = MemberAccess() {me.addChild(macc);}
  ]
  {
    return me;
  }
}