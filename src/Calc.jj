/**
 * Einfacher Parser der nicht nur einen arithmetischen Ausdruck
 * parst, sondern diesen auch ausrechnet. Unterstuetzt + - * /.
 */
PARSER_BEGIN(Calc)
public class Calc {
	public static void main(String args[]) throws ParseException {
        System.out.println("=" + new Calc(System.in).S());
        System.out.println("numberCount=" + CalcTokenManager.numberCount);
	}
}
PARSER_END(Calc)

/**
 * Token Manager Declarations - Hier werden CalcTokenManager-Members definiert.
 * Der TokenManager ist vorhanden und heisst wie der Parser + TokenManager.
 */
TOKEN_MGR_DECLS : 
{ 
    static int numberCount = 0;
} 

SKIP : { " " | "\t" }
//                              keine Zweistellige Zahl faengt mit 0 an
TOKEN : { "(" | ")" | "+" | "*" | <NUM: "0" | ["1"-"9"] (["0"-"9"])*> { numberCount++; } } 

int S() : { int res; }
{
    res = E() (<EOF> | "\n" | "\r" ) { return res; }
}

int E() : { int sum, x; }
{
    sum = T() (("-" x = T() {sum -= x;}) | ("+" x = T() {sum += x;}))* { return sum; }
}

int T() : { int prod, x; }
{   
    prod = F() (("/" x = F() {prod /= x;}) | ("*" x = F() {prod *= x;}))* { return prod; }
}

/**
 * Nach dem Kompilieren wird eine Token.java erstellt. Jedes Token hat 
 * ein image-Attribut, das die Stringrepraesentation seines Wertes haelt.
 * Token-Objekte haben auch die Eigenschaft beginLine und mehr.
 * Dazu kann man in die Token.java reinschauen.
 */
int F() : {int x; Token t;}
{
    t = <NUM> { return Integer.parseInt(t.image); }
    |
    "(" x=E() ")" { return x; }
}