PARSER_BEGIN(C0)
public class C0 {
	public static void main(String args[]) throws ParserException {
        new C0(System.in).Init();
	}
}
PARSER_END(C0)

// Whitespace separates tokens, but is otherwise ignored. Other control (non-printing) characters in the input constitute an error.
SKIP : { " " }

// Keywords
TOKEN :
{
      < INT:        "int" >
    | < BOOLEAN:    "bool" >
    | < STRING:     "string" >
    | < CHAR:       "char" >
    | < VOID:       "void" >
    | < STRUCT:     "struct" >
    | < TYPEDEF:    "typedef" >
    | < IF:         "if" >
    | < ELSE:       "else" >
    | < WHILE:      "while" >
    | < FOR:        "for" >
    | < CONTINUE:   "continue" >
    | < BREAK:      "break" >
    | < RETURN:     "return" >
    | < ASSERT:     "assert" >
    | < TRUE:       "true" >
    | < FALSE:      "false" >
    | < NULL:       "NULL" >
    | < ALLOC:      "alloc" >
    | < ALLOC_ARR:  "alloc_array" >
}

// Lexical Tokens
TOKEN :
{
        < ID: <LETTER> ( <ALPHANUM> )* >
    |   < #LETTER: ["$","A"-"Z","a"-"z","_"] >
    |   < #ALPHANUM: ["$","A"-"Z","a"-"z","0"-"9","_"] >
    |   < NUM: <DECNUM> | <HEXNUM> >
    |   < DECNUM: "0" | ["1"-"9"](["1"-"9"])* >
    |   < HEXNUM: "0" ("x" | "X") (["0"-"9","a"-"f","A"-"F"])* >
}

void Init() : 
{}
{
    <EOF>
}